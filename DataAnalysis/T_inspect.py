# -*- coding: utf-8 -*-
import os
import sys

import openpyxl
# Form implementation generated from reading ui file 'T_inspect.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QFileDialog
from openpyxl.styles import NamedStyle

from T_inspect_table import T_inspect_table
from test import single_sample_t_test, find_duplicates


class Ui_MainWindow(object):
    try:
        def setupUi(self, MainWindow):
            MainWindow.setObjectName("MainWindow")
            MainWindow.resize(780, 500)
            # 加载图片
            image_path = "button.png"
            pixmap = QtGui.QPixmap(image_path)

            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.list_content = QtWidgets.QListWidget(self.centralwidget)
            self.list_content.setGeometry(QtCore.QRect(20, 100, 180, 280))
            self.list_content.setObjectName("list_content")
            self.line_filename = QtWidgets.QLineEdit(self.centralwidget)
            self.line_filename.setGeometry(QtCore.QRect(90, 20, 400, 35))
            self.line_filename.setObjectName("line_filename")
            self.label_filename = QtWidgets.QLabel(self.centralwidget)
            self.label_filename.setGeometry(QtCore.QRect(20, 30, 72, 15))
            self.label_filename.setObjectName("label_filename")
            self.pushButton_choose = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_choose.setGeometry(QtCore.QRect(500, 20, 100, 35))
            self.pushButton_choose.setObjectName("pushButton_choose")
            self.pushButton_choose.clicked.connect(self.select_file)
            self.label_list = QtWidgets.QLabel(self.centralwidget)
            self.label_list.setGeometry(QtCore.QRect(30, 75, 72, 15))
            self.label_list.setObjectName("label_list")
            self.label_confidence_entry = QtWidgets.QLabel(self.centralwidget)
            self.label_confidence_entry.setGeometry(QtCore.QRect(500, 280, 72, 15))
            self.label_confidence_entry.setObjectName("label_confidence_entry")
            self.lineEdit_confidence_entry = QtWidgets.QLineEdit(self.centralwidget)
            self.lineEdit_confidence_entry.setGeometry(QtCore.QRect(560, 270, 120, 35))
            self.lineEdit_confidence_entry.setObjectName("lineEdit_confidence_entry")

            self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_1.setText("")
            self.pushButton_1.setObjectName("pushButton_2")
            self.pushButton_1.setIcon(QtGui.QIcon(pixmap))
            self.pushButton_1.setGeometry(QtCore.QRect(220, 120, 50, 50))
            self.pushButton_1.setIconSize(QtCore.QSize(41,41))
            self.pushButton_1.setStyleSheet(
                "QPushButton { border: none; background-image: url('button.png'); background-position: center; background-repeat: none; }")
            self.pushButton_1.clicked.connect(self.select_classfication_item)

            self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_2.setText("")
            self.pushButton_2.setObjectName("pushButton_2")
            self.pushButton_2.setIcon(QtGui.QIcon(pixmap))
            self.pushButton_2.setGeometry(QtCore.QRect(220, 300, 50, 50))
            self.pushButton_2.setIconSize(QtCore.QSize(41,41))
            self.pushButton_2.setStyleSheet(
                "QPushButton { border: none; background-image: url('button.png'); background-position: center; background-repeat: none; }")
            self.pushButton_2.clicked.connect(self.select_inspect_item)

            self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_3.setText("选择")
            self.pushButton_3.setObjectName("pushButton_3")
            self.pushButton_3.setGeometry(QtCore.QRect(700, 135, 60, 35))
            self.pushButton_3.clicked.connect(self.classfication_choose)

            self.label_inspect = QtWidgets.QLabel(self.centralwidget)
            self.label_inspect.setGeometry(QtCore.QRect(290, 240, 72, 15))
            self.label_inspect.setObjectName("label_inspect")

            self.listView_inspect = QtWidgets.QListWidget(self.centralwidget)
            self.listView_inspect.setGeometry(QtCore.QRect(290, 270, 180, 110))
            self.listView_inspect.setObjectName("listView_inspect")

            self.label_classfication = QtWidgets.QLabel(self.centralwidget)
            self.label_classfication.setGeometry(QtCore.QRect(290, 75, 72, 15))
            self.label_classfication.setObjectName("label_classfication")

            self.listView_classfication = QtWidgets.QListWidget(self.centralwidget)
            self.listView_classfication.setGeometry(QtCore.QRect(290, 100, 180, 110))
            self.listView_classfication.setObjectName("listView_classfication")

            self.label_classfication_choose = QtWidgets.QLabel(self.centralwidget)
            self.label_classfication_choose.setGeometry(QtCore.QRect(500, 75, 72, 15))
            self.label_classfication_choose.setObjectName("label_classfication_choose")

            self.listView_classfication_choose = QtWidgets.QListWidget(self.centralwidget)
            self.listView_classfication_choose.setGeometry(QtCore.QRect(500, 100, 180, 110))
            self.listView_classfication_choose.setObjectName("listView_classfication_choose")

            self.label_instpect_num = QtWidgets.QLabel(self.centralwidget)
            self.label_instpect_num.setGeometry(QtCore.QRect(500, 345, 72, 15))
            self.label_instpect_num.setObjectName("label_instpect_num")

            self.lineEdit_inspect = QtWidgets.QLineEdit(self.centralwidget)
            self.lineEdit_inspect.setGeometry(QtCore.QRect(560, 335, 120, 35))
            self.lineEdit_inspect.setObjectName("lineEdit_inspect")

            self.pushButton_determine = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_determine.setGeometry(QtCore.QRect(225, 400, 90, 40))
            self.pushButton_determine.setObjectName("pushButton_determine")
            self.pushButton_determine.clicked.connect(self.Submit)

            self.pushButton_reset = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_reset.setGeometry(QtCore.QRect(465, 400, 90, 40))
            self.pushButton_reset.setObjectName("pushButton_reset")
            self.pushButton_reset.clicked.connect(self.Reset)

            self.pushButton_cancel = QtWidgets.QPushButton(self.centralwidget)
            self.pushButton_cancel.setGeometry(QtCore.QRect(345, 400, 90, 40))
            self.pushButton_cancel.setObjectName("pushButton_cancel")
            self.pushButton_cancel.clicked.connect(self.Cancel)

            MainWindow.setCentralWidget(self.centralwidget)
            self.menubar = QtWidgets.QMenuBar(MainWindow)
            self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
            self.menubar.setObjectName("menubar")
            self.menu_T = QtWidgets.QMenu(self.menubar)
            self.menu_T.setObjectName("menu_T")
            MainWindow.setMenuBar(self.menubar)
            self.statusbar = QtWidgets.QStatusBar(MainWindow)
            self.statusbar.setObjectName("statusbar")
            MainWindow.setStatusBar(self.statusbar)
            self.menubar.addAction(self.menu_T.menuAction())

            self.retranslateUi(MainWindow)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
            self.label_filename.setText(_translate("MainWindow", "文件名称"))
            self.pushButton_choose.setText(_translate("MainWindow", "选择文件"))
            self.label_list.setText(_translate("MainWindow", "列项："))
            self.label_confidence_entry.setText(_translate("MainWindow", "置信度："))
            self.label_inspect.setText(_translate("MainWindow", "检验变量："))
            self.label_instpect_num.setText(_translate("MainWindow", "检验值："))
            self.label_classfication_choose.setText(_translate("MainWindow", "分类选择："))
            self.label_classfication.setText(_translate("MainWindow", "分类："))
            self.pushButton_determine.setText(_translate("MainWindow", "确定"))
            self.pushButton_reset.setText(_translate("MainWindow", "重置"))
            self.pushButton_cancel.setText(_translate("MainWindow", "取消"))
            self.menu_T.setTitle(_translate("MainWindow", "单样本T检验"))

        # 选择文件
        def select_file(self):
            try:
                file_dialog = QFileDialog()
                file_name, _ = file_dialog.getOpenFileName(self.centralwidget, "Select File",
                                                           "", "Excel Files (*.xlsx *.xlsm *.sxc *.ods *.csv *.tsv)")
                global global_file_name
                global_file_name = file_name
                # 打开Excel文件
                workbook = openpyxl.load_workbook(file_name)
                # 将文件名设置为文本框的值
                file_name = os.path.basename(file_name)
                self.line_filename.clear()  # 清空文本框内容
                self.line_filename.insert(file_name)  # 设置文本框的值
                # 添加默认样式
                default_style = NamedStyle(name="default")
                workbook.default_style = default_style
                # 获取第一个工作表
                sheet = workbook.active
                global glo_sheet
                glo_sheet = sheet
                # 获取列名
                column_names = [cell.value for cell in sheet[1]]
                global selected_column_names
                selected_column_names = column_names
                # 清空listbox内容
                self.list_content.clear()
                # 将列名添加到listbox
                for name in column_names:
                    self.list_content.addItem(name)
            except Exception as e:
                # 处理异常
                print("选择文件时出现错误:", str(e))

        #选择检测变量
        def select_inspect_item(self):
            selected_items = self.list_content.selectedItems()
            for item in selected_items:
                self.list_content.takeItem(self.list_content.row(item))
                self.listView_inspect.addItem(item.text())

        #选择分类
        def select_classfication_item(self):
            global classfication_column_values, selected_classfication_items, selected_inspect_items, inspect_column_values
            selected_items = self.list_content.selectedItems()
            for item in selected_items:
                self.list_content.takeItem(self.list_content.row(item))
                item_text = item.text() + " = ?"
                self.listView_classfication.addItem(item_text)

            selected_classfication_items = [self.listView_classfication.item(i).text().strip("?").strip(' ').strip("=").strip(' ') for i in
                                            range(self.listView_classfication.count())]
            selected_classfication_items = [item.strip() for item in selected_classfication_items]  # 去除换行

            # 打开Excel文件
            workbook = openpyxl.load_workbook(global_file_name)
            # 获取第一个工作表
            sheet = workbook.active

            for selected_classfication_item in selected_classfication_items:
                # 获取选中的列名
                selected_classfication_column = selected_classfication_item
                # 获取列的索引
                classfication_column_index = selected_column_names.index(
                    selected_classfication_column) + 1  # 注意索引从1开始
                # 获取列的全部值
                classfication_column_values = [cell[0] for cell in
                                               sheet.iter_rows(min_row=2, min_col=classfication_column_index,
                                                               values_only=True)]
                print(selected_classfication_column, classfication_column_index, classfication_column_values)
            classficatioin_type = find_duplicates(classfication_column_values)
            for (key, value) in classficatioin_type.items():
                self.listView_classfication_choose.addItem(str(key))

        #获取置信度
        def get_confidence_entry_item(self):
            try:
                confidence_entry = self.lineEdit_confidence_entry.text()
                confidence_entry = float(confidence_entry)
                return confidence_entry
            except Exception as e:
                # 处理异常
                print("请输入正确置信度:", str(e))

        #获取检测值
        def get_inspection_item(self):
            try:
                inspection_entry = self.lineEdit_inspect.text()
                inspection_entry = float(inspection_entry)
                return inspection_entry
            except Exception as e:
                # 处理异常
                print("请输入正确检验值:", str(e))

        #分类选择值
        def classfication_choose(self):
            global classfication_value
            search_text = " = ?"
            choose_items = self.listView_classfication_choose.selectedItems()
            for item in choose_items:
                replace_text = " = " + item.text()
                classfication_value = item.text()
            for index in range(self.listView_classfication.count()):
                item = self.listView_classfication.item(index)
                item_text = item.text()
                if item_text.endswith(search_text):
                    new_text = item_text[:-len(search_text)] + replace_text
                    item.setText(new_text)
                    break
            self.listView_classfication_choose.clear()

        #确定按钮提交
        def Submit(self):
            try:
                selected_inspect_items = [self.listView_inspect.item(i).text() for i in
                                          range(self.listView_inspect.count())]
                selected_inspect_items = [item.strip() for item in selected_inspect_items]  # 去除换行
                # 打开Excel文件
                workbook = openpyxl.load_workbook(global_file_name)
                # 获取第一个工作表
                sheet = workbook.active
                for selected_inspect_item in selected_inspect_items:
                    # 获取选中的列名
                    selected_inspect_column = selected_inspect_item
                    # 获取列的索引
                    inspect_column_index = selected_column_names.index(selected_inspect_column) + 1  # 注意索引从1开始
                    # 获取列的全部值
                    inspect_column_values = [cell[0] for cell in
                                             sheet.iter_rows(min_row=2, min_col=inspect_column_index, values_only=True)]
                    print(selected_inspect_column, inspect_column_index, inspect_column_values)
                print(f'classfication_column_values:{classfication_column_values}')
                selected_classfication_arr = []
                for index in range(len(classfication_column_values)):
                    if(str(classfication_column_values[index]) == classfication_value):
                        selected_classfication_arr.append(inspect_column_values[index])
                print(f'selected_classfication_arr:{selected_classfication_arr}')
                confidence_entry = self.get_confidence_entry_item()
                inspection_entry = self.get_inspection_item()
                T_reslut = single_sample_t_test(selected_classfication_arr, float(inspection_entry), float(confidence_entry))
                T_reslut.append(classfication_value)

                # 计算并展示表格
                self.T_inspect_window = T_inspect_table()
                self.T_inspect_window.setupUi(inspection_entry, confidence_entry, selected_classfication_items[0],
                                              selected_inspect_items[0], T_reslut)
                self.T_inspect_window.show()

            except Exception as e:
                # 处理异常
                print("T检验计算出错:", str(e))

        #取消按钮提交
        def Cancel(self):
            self.listView_inspect.clear()
            self.listView_classfication.clear()
            self.listView_classfication_choose.clear()
            self.list_content.clear()
            for name in selected_column_names:
                self.list_content.addItem(name)

        #重置按钮提交
        def Reset(self):
            self.line_filename.clear()
            self.list_content.clear()
            self.listView_classfication.clear()
            self.listView_inspect.clear()
            self.lineEdit_inspect.clear()
            self.lineEdit_confidence_entry.clear()
            self.listView_classfication_choose.clear()

    except Exception as e:
        print("T检验异常:", str(e))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())